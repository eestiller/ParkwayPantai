@model Telerik.Sitefinity.Frontend.Navigation.Mvc.Models.INavigationModel

@using Telerik.Sitefinity.Frontend.Mvc.Helpers;
@using Telerik.Sitefinity.Frontend.Navigation.Mvc.Models;
@using Telerik.Sitefinity.Modules.Pages;

@*Add scripts and stylesheets*@

<div class="@Model.CssClass">
    @* @Html.Action("GetView", new { viewName = "Dropdown",  model= Model}) *@

    <nav class="navbar navbar-default">

        <div class="container-fluid">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-target="#mobile-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand site-logo" href="/"><img src="/images/librariesprovider2/default-album/parkway-shenton-logo.png" alt="Shenton Parkway" class="img-responsive"/></a>
            </div>

            <div class="collapse navbar-collapse" id="mobile-collapse">
				<div class="navbarWrap">
					<div class="mobile-btn-wrap"><a id="mobile-close"><span aria-hidden="true">&times;</span></a></div>
					<ul class="nav navbar-nav navbar-right">
						<li id="navSearch">
							<div class="clearfix customSearchContainer">
							<div class="customSearchWrap">
								<script type="text/javascript">
								  (function() {
									var cx = '003160911585029599002:npfyod0fzc4';
									var gcse = document.createElement('script');
									gcse.type = 'text/javascript';
									gcse.async = true;
									gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
									var s = document.getElementsByTagName('script')[0];
									s.parentNode.insertBefore(gcse, s);
								  })();
								</script>
								<gcse:search></gcse:search>
							</div>
							<a href="#" target="_self" id="headerSearch"></a>
							</div>
							<a href="#" class="searchToggle">&nbsp;</a>
						</li>
						@foreach (var node in Model.Nodes)
						{
							@RenderRootLevelNode(node);
						}
						<!-- <li class="btn-login"><a href="#" target="_self">Login</a></li> -->
					</ul>
				</div>
            </div><!-- /.navbar-collapse -->
        </div><!-- /.container-fluid -->
    </nav>
</div>

@*Here is specified the rendering for the root level*@
@helper RenderRootLevelNode(NodeViewModel node)
{
    if (node.ChildNodes.Count > 0)
    {
        <li class="dropdown">
            <a href="#" data-toggle="dropdown" class="dropdown-toggle">@node.Title
                <span class="caret"></span>
            </a>
            <ul class="dropdown-menu">
                @RenderSubLevelsRecursive(node)
            </ul>
        </li>
    }
    else
    {
        <li class="@GetClass(node)"><a href="@node.Url" target="@node.LinkTarget">@node.Title</a></li>
    }
}

@*Here is specified the rendering for all child levels*@
@helper RenderSubLevelsRecursive(NodeViewModel node)
{
    foreach (var childNode in node.ChildNodes)
    {
        if(childNode.ChildNodes.Count > 0)
        {
             <li class="dropdown-submenu">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title
                    <span class="right-caret"></span>
                </a>
                <ul class="dropdown-menu">
                    @RenderSubLevelsRecursive(childNode)
                </ul>
            </li>
        }
        else
        {
            <li class="@GetClass(childNode)">
                <a href="@childNode.Url" target="@childNode.LinkTarget">@childNode.Title</a>
            </li>
        }
    }
}

@*Resolves the class that will be added for each node depending whether it is selected*@
@helper GetClass(NodeViewModel node)
{

    if (node.IsCurrentlyOpened)
    {
        @Html.Raw("active");
    }
    else if (node.HasChildOpen)
    {
        @Html.Raw("active");
    }
}
